version: '3.8'

# Development Docker Compose for local development
# Hot reload, debugging, and development tools enabled

services:
  linkedin-research-backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: linkedin-research-backend-dev
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-5001}:5000"
      - "${DEBUG_PORT:-5678}:5678"  # Debug port
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY:-dev-secret-key}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/linkedin_research.db}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIVESIM_API_KEY=${FIVESIM_API_KEY}
      - EMAILONDECK_API_KEY=${EMAILONDECK_API_KEY}
      - GEONODE_CREDENTIALS=${GEONODE_CREDENTIALS}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_IP=${POSTGRES_IP:-}
      - POSTGRES_DB=${POSTGRES_DB:-linkedin_research}
      - POSTGRES_USER=${POSTGRES_USER:-linkedin_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-linkedin_password}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-3600}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-false}
      - MAX_REQUESTS_PER_MINUTE=${MAX_REQUESTS_PER_MINUTE:-1000}
      - LOG_LEVEL=DEBUG
      - PYTHONUNBUFFERED=1
    volumes:
      - .:/app
      - /app/venv  # Exclude virtual environment
    command: python -m debugpy --listen 0.0.0.0:5678 -m flask run --host=0.0.0.0 --port=5000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - linkedin-research-network

  linkedin-research-frontend:
    image: nginx:alpine
    container_name: linkedin-research-frontend-dev
    restart: unless-stopped
    ports:
      - "${FRONTEND_HTTP_PORT:-8080}:80"
      - "${FRONTEND_HTTPS_PORT:-8443}:443"
    volumes:
      - ./static:/usr/share/nginx/html
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - linkedin-research-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - linkedin-research-network

  # PostgreSQL for development (optional alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: linkedin-research-postgres-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=linkedin_research
      - POSTGRES_USER=linkedin_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-linkedin_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U linkedin_user -d linkedin_research"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - linkedin-research-network
    profiles:
      - database

  # Adminer for database management (optional)
  adminer:
    image: adminer:latest
    container_name: linkedin-research-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - linkedin-research-network
    profiles:
      - database

networks:
  linkedin-research-network:
    driver: bridge

volumes:
  postgres_data:
